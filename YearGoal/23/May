Git
1. https://blog.csdn.net/qq_35432904/article/details/107232691(分支间合并部分commit)与一些常见的使用

Ruby

1. ruby进阶

2. method_missing方法

3. gem包的创建与发布

4. 若想自定义父类原有的方法 在当前类下 自定义父类方法 => 原理是在父类方法的基础上增加代码 => 待测试(结合 copy项目下 Timemodel模块)



Final
1.  10.24-10.30
    11.07-11.13
    11.21-11.27
    11.28-12.04
    12.05-12.11
    12.12-12.18


2. dev_local_v7_kjyj分支下 sci/projects_controller下  根据collection方法搜索 joins(:collections)时 会在joins后 on条件上自动增加 container_type="Sci:Project"的判断 这个是什么时候加上去 待研究


3. CustomFunctionDemo项目所有commit复习



rails

1. rails model删除关联

    #多看
        7. delete_all(delete) destroy_all(destroy)
         has_many :pets # dependent: :nullify option by default => 默认删除下为null
        动作上:
            delete_all;一条sql删除所有数据 比如; delete from tables where id > 0;
            destroy_all;一条一条删除。比如：循环执行 delete from tables where id = 1; delete from tables where id = 2.....
        状态上:
            delete_all; 直接删除，不执行任何回调与业务逻辑
            destroy_all; 通过要删除的主数据，找到所有外数据，通过dependent类型，对外数据进行操作(destroy删除，设置null，delete删除)
                因此又进入第一个主数据下外数据的删除操作，如果当前外数据存在外数据，便重复执行操作

        参考链接:
            1.https://blog.csdn.net/axu_air/article/details/78403720
            2.https://www.cnblogs.com/hello-ruby/p/15189209.html


2. RailsMailer操作(详细操作)

3. RailsJob(详细操作)

# 重点; 做后台不用第三方框架下 ManageBackHelper模块下的方法很有用
4. ManageBackHelper模块(后台数据填充演示模块)
        1. overflow_hidden_span
            <td class="text-left">
                  <%= link_to "#{@remote}/users/#{user.login}/classrooms", target: '_blank' do %>
                    <%= overflow_hidden_span user.real_name, width: 120 %>
                  <% end %>
            </td>

            def overflow_hidden_span(text, width: 300, placement: nil)
                opts = { class: 'd-inline-block text-truncate', style: "max-width: #{width}px" }
                opts.merge!('data-toggle': 'tooltip', title: text) if text != '--'
                opts.merge!('data-placement': placement) if placement

                content_tag(:span, text&.truncate(10), opts)
            end
        2. sort_tag方法
        3. content_tag方法


5. 蛋人网(rails项目-BS商城)

6. rails 前端技术闪现消息还带加强(最开始的rails书籍要回顾一下)


7. educoder用户功能设计   => 也是个重点与难点
    1.游客登录(用户并没有登录)时候 current_user = User.find(2) => 代码如何实现从User.current切入



8. 批量更新百万级千万级的数据(不是本质上解决的方法)
       1. find_each find_in_batches
       2. 使用update_column字段更新 跳过 回调与校验
       3. 可以将需要的数据拼接成为string类型 然后一条mysql执行 (感觉这个不一定ok)
       StudentWork.find_each(batch_size: 10000,start: 10) do |work|
             # update_column 方法取消校验与回调
             work.update_column(:unadjusted_score, work.work_score)
           end

9. rails ActiveRecord下回调
 https://doc.bccnsoft.com/docs/rails-guides-4.1-cn/active_record_callbacks.html


10. rails enum特性
    1. https://ruby-china.org/topics/28654















