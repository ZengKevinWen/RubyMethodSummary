主要路线:

1. 争取吧数据库工程师资格证书考了

2. 台式必买(√)

3. 升本

3.ruby rails 书籍
    1. rails5
    2. ruby源编程


5. 前后端项搭建登录功能吧(估计至少都得后半年才有时间)
    1. educoder用户功能设计(cookie的存储)   => 也是个重点与难点
        1.游客登录(用户并没有登录)时候 current_user = User.find(2) => 代码如何实现从User.current切入


    2. 自定义定时任务的使用
        1. 定时任务的详情设计参考educoder下ScheduleJobUtil模块
            1. ScheduleJobUtil模块 job_items表 结合定时任  并且定时任务执行后能否删除  当前时间大于指定任务的执行数据，定时任务会不会执行

            (包括定时任务) => 当定时任务的时间为false或者 true时，会直接执行  2.当定时任务已执行后，是无法删除的(应该是的)



6. 蛋人网(三门课程)
    1. 购物商城


开启服务： 1.启动Rails Web Server(如webrick)

发送请求： 2.客户端发出HTTP请求

请求先经过哪里： 3.Rails经过rack和ActionDispatch模块

经过那些类： 4.ActionDispath::Request; 5.ActionDispath::Router; 6.ActionController::Base

产生那些对象： 7.Rack::Request; 8.Action::Dispatch Requestfragment; 9.Action::Dispatch Requestruntime; 10.Action::Dispatch Requestparamters; 11.ActionController::RequestForgeryProtection; 12.ActionController::Parameter; 13.ActionController::Cookies; 14.ActionController::Filters;

如何进行跳转： 15.Ract::Router实例负责根据匹配的路由去定位Controller的操作Action.

有那些中间接： 16.ActionController根据请求参数Patch码实例化ActiveModel实体 17.在ActionController中激活对应的控制器并处理请求，调用Model从数据库查询数据，把Model封装成view（actionView） 18.ActionView就根据erb语法把数据在页面上展示 19.Rack实例把数据包装成响应封装给客户端 20.客户端得到响应


