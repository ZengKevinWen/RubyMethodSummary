mysql

叶子节点：  应该就是最外层的节点

1. B树与B+树之前的区别是什么  什么是B树与B+树 二叉树 平衡二叉树
	二叉树: 1. 任意节点只有2个或2个以下子节点 2. 左边的子节点一定小于父节点 右边子节点一定大于父节点
	B树: 1， 一个节点有多个元素 2. 所有节点中，元素都是排序的
	B+树: 基于B树
	      说法1. 所有的非叶子节点在叶子节点上冗余了一份数据 ，并且叶子节点之间有指针 有序  => mysql中使用的B+树是双向的 ， 明天可以查查其他数据库有哪些是单项的指针
	      说法2.  B+树结构上的所有非叶子节点数据在 都存在叶子节点上


2， Innoadb中B+树有什么特点
	问题1中的 B+树的描述

3. 什么是 Innodb中的page(页)

	操作系统中的页的概念/4kb

	mysql： show global status like 'Innodb_page_size'; => 查看页的大小

	Innodb与磁盘交互时候(读，写)，最小单位是1个page(16kb)

	Innodb中page的结构 最好有图

	show index from table; 后有个index_type能直接查看索引类型: b-tree(mysql应该是b+ tree,因为b+ tree只是b tree的一个种类，mysql这里展示的是b tree)

	page的作用
	1.提高查询效率, 一次性取从磁盘取16kb数据 在就行cpu与内存的交互 =》 1(操作一次磁盘) + N(操作多次内存)  大于 N(一次一次从磁盘中取数据) + N(操作多次内存)

	描述innodb中page
	1. innodb存储引擎的结构，将数据都放在一个空间(表空间)中，该空间中包含 段 块(区) 页(page), 块包含64个page， page是innodb与磁盘交互的最小单位， 一个page中有多个字page

4. Innodb中的B+树是怎么产生的


5. 什么是聚簇索引(id 主键就是，插入数据时候，就已经排序了) 每个表只能有一个聚簇索引， 如果没有设置主键，innodb会默认将选一个非空索引作为聚簇索引
	主键与聚簇索引的区别: https://chat.openai.com/c/2dd73d1a-4251-441a-89e5-f1aa54e43232、


6. Innodb是如何 支持范围查找 能走索引的？
7. 什么是联合索引 对应的B+树是如何生成的 不看

中午听  6  7 8  9  12 13 14  优先级 12 13 14
8. 什么是最左前缀原则
9. 为什么要遵守最最前缀原则才能利用到索引
10. 什么是条件索引下推  优化技术 不看不会
11. 什么是覆盖索引
	覆盖索引:  实际需要查询的列就是索引中的列  对大型数据特别有效 :https://chat.openai.com/c/2dd73d1a-4251-441a-89e5-f1aa54e43232
12. 有哪些情况会导致索引失效
13. 谈谈如何分库分表
14. mysql慢查询如何优化
	explain函数查看查询详情
	是否最优索引 覆盖索引 聚簇索引 联合索引 读写分离
	查找的列是否过多
	修改表增加接口，增加必要列
	分库分表
	增加服务器

查找 5  10，11，


行锁   属于悲观锁
表锁 属于背观锁
间接索

共享锁/读锁
排它锁/写锁




redis

删除策略 定时删除 定期删除 逐出策略 惰性删除


AOF RDB持久化

锁

GEO bitmaps Hopeloglog